/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) { 
        if (root == null) {
            return root;
        }
        
        if (root.right != null) {
            root.right.next = getNextNode(root);
            connect(root.right);
        }
        
        if (root.left != null) {
            if (root.right != null) {
                root.left.next = root.right;
            } else {
                root.left.next = getNextNode(root);
            }             
            connect(root.left);
        }
        return root;
    }
    
    private Node getNextNode(Node node) {
        while(node.next != null) {
            if (node.next.left != null) {
                return node.next.left;
            } 
            if (node.next.right != null) {
                return node.next.right;
            }
            node = node.next;
        }
        return null;
    }
}